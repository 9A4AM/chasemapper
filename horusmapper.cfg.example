#
# Project Horus Chase-Mapper Configuration File
#
# Copy this file to horusmapper.cfg and modify as required. 
#

#
# Telemetry Source Profiles
# Multiple Telemetry source profiles can be defined, and can be selected from
# the web GUI.
#
[profile_selection]
# How many profiles have been defined
profile_count = 1
# Index of the default profile (indexing from 1)
default_profile = 1

[profile_1]
# Profile name - will be shown in the web client.
profile_name = Default
# Telemetry source type:
#  ozimux - Read data in OziMux format
#  horus_udp - Read Horus UDP Broadcast 'Payload Summary' messages 
telemetry_source_type = ozimux
# Telemetry source port (UDP)
telemetry_source_port = 8942

# Car Position Source
# none - No Chase-Car GPS
# horus_udp - Read Horus UDP Broadcast 'Car GPS' messages
# gpsd - Poll GPSD for positions (TO BE IMPLEMENTED)
car_source_type = horus_udp
# Car position source port (UDP) - only used if horus_udp is selected
car_source_port = 55672

# Other profiles can be defined in sections like the following:
[profile_2]
# Example source to take telemetry data from an instance of radiosonde_auto_rx
# emitting Horus UDP packets on port 55673, but still accept car positions via the
# 'standard' Horus UDP port 55672
profile_name = auto_rx
telemetry_source_type = horus_udp
telemetry_source_port = 55673
car_source_type = horus_udp
car_source_port = 55672


[gpsd]
# GPSD Host/Port - Only used if selected in the telemetry profile
# TO BE IMPLEMENTED
gpsd_host = localhost
gpsd_port = 2947


# Map Defaults
[map]
# Host/port to host webserver on
flask_host = 0.0.0.0
flask_port = 5001

# Default map centre
default_lat = -34.9
default_lon = 138.6

# How long to keep payload data (minutes)
payload_max_age = 180

# Predictor Settings
# Use of the predictor requires installing the CUSF Predictor Python Wrapper from here:
# https://github.com/darksidelemm/cusf_predictor_wrapper
# You also need to compile the predictor binary, and copy it into this directory.
[predictor]
# Enable Predictor (True/False) - This can also be enabled from the web client.
predictor_enabled = False

# Predictor defaults - these can be modified at runtime in the web interface.
default_burst = 30000
default_descent_rate = 5.0

# Predictory Binary Location
# Where to find the built CUSF predictor binary. This will usually be ./pred or pred.exe (on Windows)
pred_binary = ./pred

# Directory containing GFS model data.
gfs_directory = ./gfs/

# Wind Model Download Command
# Optional command to enable downloading of wind data via a web client button.
# Example: (this will require copying the get_wind_data.py script to this dirctory)
# model_download = python get_wind_data.py --lat=-33 --lon=139 --latdelta=10 --londelta=10 -f 24 -m 0p50 -o gfs
# The gfs directory (above) will be cleared of all .dat files prior to the above command being run.
model_download = none


#
#	Offline Tile Server
#
#	Allows serving of map tiles from a directory.
#	Each subdirectory is assumed to be a separate layer of map tiles, i.e. 'OSM', 'opencyclemap',
#	and is added to the map interface as a separate layer.
#	This feature can be used to serve up FoxtrotGPS's tile cache as layers, usually located in ~/Maps/
#
[offline_maps]
# Enable serving up maps from a directory of map tiles.
tile_server_enabled = False

# Path to map tiles. For FoxtrotGPS, this is usually ~/Maps/
# NOTE: This must be an ABSOLUTE directory, i.e. /home/pi/Maps/ - ~/Maps/ will not work.
tile_server_path = /home/pi/Maps/



